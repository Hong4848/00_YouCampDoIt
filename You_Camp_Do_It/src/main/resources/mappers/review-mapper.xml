<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="reviewMapper">
  
  <resultMap id="reviewResultMap" type="review">
  	<id column="REVIEW_NO" property="reviewNo" />
  	<result column="REVIEW_TITLE" property="reviewTitle" />
  	<result column="REVIEW_CONTENT" property="reviewContent" />
  	<result column="REVIEW_COUNT" property="reviewCount" />
  	<result column="CREATE_DATE" property="createDate" />
  	<result column="REVIEW_WRITER" property="reviewWriter" />
  	<result column="MAINIMAGE" property="mainImage" />
  	<result column="MEMBER_NO" property="memberNo" />
  </resultMap>
  	
 	<resultMap id="reviewAttachments" type="reviewAttachment">
	   	<result column="FILE_NO" property="fileNo" />
	  	<result column="ORIGIN_NAME" property="originName" />
	  	<result column="CHANGE_NAME" property="changeName" />
	  	<result column="FILE_PATH" property="filePath" />
	  	<result column="UPLOAD_DATE" property="uploadDate" />
	  	<result column="FILE_LEVEL" property="fileLevel" />
	  	<result column="REVIEW_NO" property="reviewNo" /> 
   </resultMap>
   
   <resultMap id="replyResultSet" type="reviewReply">
   	<id column="REPLY_NO" property="replyNo" />
   	<result column="REPLY_CONTENT" property="replyContent" />
   	<result column="REPLY_WRITER" property="replyWriter" />
   	<result column="CREATE_DATE" property="createDate" />
   	<result column="MEMBER_NO" property="memberNo" />
   	<result column="REVIEW_NO" property="reviewNo" />
   </resultMap>
  
  	<!-- 후기 게시글 갯수 조회용 쿼리문 -->
	<!-- 검색 조건에 따른 전체 리스트 수 -->
	<select id="selectListCount" resultType="_int" parameterType="map">
		SELECT COUNT(*)
		  FROM REVIEW
		 WHERE STATUS = 'Y'
		  <if test="condition != null and keyword != null">
	        <choose>
	            <when test="condition == 'title'">
	                AND REVIEW_TITLE LIKE '%' || #{keyword} || '%'
	            </when>
	            <when test="condition == 'content'">
	                AND REVIEW_CONTENT LIKE '%' || #{keyword} || '%'
	            </when>
	            <when test="condition == 'content'">
	                AND REVIEW_WRITER LIKE '%' || #{keyword} || '%'
	            </when>
	        </choose>
    	 </if>
	</select>

  
   <select id="selectCount" resultType="_int">
        SELECT COUNT(*)
        FROM REVIEW
    </select>
    
    <!-- 목록조회 -->
    <select id="selectReviewList" resultMap="reviewResultMap">
	    SELECT R.REVIEW_NO
		      , TO_CHAR(CREATE_DATE, 'YYYY.MM.DD') AS "CREATE_DATE"
		      , REVIEW_TITLE
		      , CHANGE_NAME AS "MAINIMAGE"
		  FROM REVIEW R
		  JOIN REVIEW_ATTACHMENT A ON (R.REVIEW_NO = A.REVIEW_NO)
		 WHERE R.STATUS = 'Y'
		   AND FILE_LEVEL = 1
		  <if test="condition != null and keyword != null">
	        <choose>
	            <when test="condition == 'title'">
	                AND REVIEW_TITLE LIKE '%' || #{keyword} || '%'
	            </when>
	            <when test="condition == 'content'">
	                AND REVIEW_CONTENT LIKE '%' || #{keyword} || '%'
	            </when>
	            <when test="condition == 'content'">
	                AND REVIEW_WRITER LIKE '%' || #{keyword} || '%'
	            </when>
	        </choose>
    	 </if>
		 ORDER BY REVIEW_NO DESC
	</select>
    
    <!-- 이벤트 게시글 등록 -->
    <insert id="insertReview" parameterType="review">
	    <selectKey keyProperty="reviewNo" resultType="int" order="BEFORE">
	        SELECT REVIEW_SEQ.NEXTVAL FROM DUAL
	    </selectKey>
	    INSERT INTO REVIEW (
	        REVIEW_NO,
	        REVIEW_TITLE,
	        REVIEW_CONTENT,
	        CREATE_DATE,
	        MEMBER_NO,
	        REVIEW_WRITER
	    ) VALUES (
	        #{reviewNo},
	        #{reviewTitle},
	        #{reviewContent},
	        SYSDATE,
	        #{memberNo},
	        #{reviewWriter}
	    )
	</insert>
    
    <!-- 이벤트 게시글 첨부파일 등록 -->
    <insert id="insertReviewAttachment" parameterType="reviewAttachment">
        INSERT INTO REVIEW_ATTACHMENT (
        	FILE_NO,
            ORIGIN_NAME,
            CHANGE_NAME,
            FILE_PATH,
            UPLOAD_DATE,
            FILE_LEVEL,
            STATUS,
            REVIEW_NO
        ) VALUES (
        	FILE_SEQ.NEXTVAL,
            #{originName},
            #{changeName},
            #{filePath},
            SYSDATE,
            #{fileLevel},
            'Y',
            #{reviewNo}
        )
    </insert>
  

	<!-- 상세조회 쿼리문 -->
	<select id="selectReview" parameterType="_int" resultMap="reviewResultMap">
		SELECT REVIEW_NO
		     , TO_CHAR(CREATE_DATE, 'YYYY.MM.DD') AS "CREATE_DATE"
		     , REVIEW_TITLE
		     , REVIEW_CONTENT
		     , MEMBER_ID AS "REVIEW_WRITER"
		  FROM REVIEW R
		  JOIN MEMBER M ON (R.MEMBER_NO = M.MEMBER_NO)
		 WHERE REVIEW_NO = #{reviewNo}
		   AND R.STATUS = 'Y'
	</select>
	
	<select id="selectReviewAttachment" resultMap="reviewAttachments" parameterType="_int">
		SELECT FILE_NO
		     , ORIGIN_NAME
		     , CHANGE_NAME
		     , FILE_PATH
		     , FILE_LEVEL
		  FROM REVIEW_ATTACHMENT
		 WHERE REVIEW_NO = #{reviewNo}
		   AND STATUS = 'Y'
		 ORDER BY FILE_LEVEL ASC
	</select>
	
	<!-- 수정하기 쿼리문 -->
	<update id="updateReview" parameterType="review">
	    UPDATE REVIEW
	    SET REVIEW_TITLE = #{reviewTitle}
	      , REVIEW_CONTENT = #{reviewContent}
	      , CREATE_DATE = SYSDATE
	    WHERE REVIEW_NO = #{reviewNo}
	      AND STATUS = 'Y'
	</update>
	
	<!-- 첨부파일 수정 쿼리문 -->
	<update id="updateReviewAttachment" parameterType="reviewAttachment">
	     UPDATE REVIEW_ATTACHMENT
		    SET ORIGIN_NAME = #{originName}
		      , CHANGE_NAME = #{changeName}
		      , FILE_PATH = #{filePath}
		      , UPLOAD_DATE = SYSDATE
		 WHERE FILE_NO = #{fileNo}
		   AND STATUS = 'Y'
	</update>
	
	<!-- 첨부파일 삭제 쿼리 -->
	<update id="deleteReviewAttachment" parameterType="int">
	    UPDATE REVIEW_ATTACHMENT
	       SET STATUS = 'N'
	     WHERE FILE_NO = #{fileNo}
	</update>
	
	
	<!-- 삭제하기 쿼리문 -->
	<update id="deleteReview" parameterType="_int">
	    UPDATE REVIEW
	    SET STATUS = 'N'
	    WHERE REVIEW_NO = #{reviewNo}
	</update>
	

	<!-- 내가 쓴 글 목록조회 -->
	<select id="selectMyCount" resultType="_int">
        SELECT COUNT(*)
          FROM REVIEW
         WHERE MEMBER_NO = #{memberNo}
    </select>
    <select id="selectMyReviewList" resultMap="reviewResultMap">
	    SELECT R.REVIEW_NO
		      , TO_CHAR(CREATE_DATE, 'YYYY.MM.DD') AS "CREATE_DATE"
		      , REVIEW_TITLE
		      , CHANGE_NAME AS "MAINIMAGE"
		  FROM REVIEW R
		  JOIN REVIEW_ATTACHMENT A ON (R.REVIEW_NO = A.REVIEW_NO)
		 WHERE R.STATUS = 'Y'
		   AND R.MEMBER_NO = #{memberNo}
		   AND FILE_LEVEL = 1
		 ORDER BY REVIEW_NO DESC
	</select>

	<!-- 좋아요 관련 쿼리문들 -->
	<!-- 좋아요 여부 확인 -->
    <select id="checkLike" resultType="int">
        SELECT COUNT(*)
        FROM REVIEW_LIKE
        WHERE MEMBER_NO = #{memberNo} AND REVIEW_NO = #{reviewNo}
    </select>

    <!-- 좋아요 추가 -->
    <insert id="insertLike">
        INSERT INTO REVIEW_LIKE (MEMBER_NO, REVIEW_NO)
        VALUES (#{memberNo}, #{reviewNo})
    </insert>

    <!-- 좋아요 삭제 -->
    <delete id="deleteLike">
        DELETE FROM REVIEW_LIKE
        WHERE MEMBER_NO = #{memberNo} AND REVIEW_NO = #{reviewNo}
    </delete>

    <!-- 좋아요 수 업데이트 -->
    <update id="updateLikeCount">
        SELECT COUNT(*)
		  FROM REVIEW_LIKE
	   	 WHERE REVIEW_NO = #{reviewNo}
    </update>

    <!-- 좋아요 수 조회 -->
    <select id="getLikeCount" resultType="int">
        SELECT COUNT(*)
	      FROM REVIEW_LIKE
	     WHERE REVIEW_NO = #{reviewNo}
    </select>
    
    <select id="selectMyLikedCount" resultType="_int">
	    SELECT COUNT(*)
	      FROM REVIEW R
	      JOIN REVIEW_LIKE L ON R.REVIEW_NO = L.REVIEW_NO
	     WHERE R.STATUS = 'Y'
	       AND L.MEMBER_NO = #{memberNo}
	</select>
	<select id="selectMyLikedReviewList" resultMap="reviewResultMap">
	    SELECT R.REVIEW_NO
	         , TO_CHAR(R.CREATE_DATE, 'YYYY.MM.DD') AS "CREATE_DATE"
	         , R.REVIEW_TITLE
	         , A.CHANGE_NAME AS "MAINIMAGE"
	      FROM REVIEW R
	      JOIN REVIEW_ATTACHMENT A ON R.REVIEW_NO = A.REVIEW_NO
	      JOIN REVIEW_LIKE L ON R.REVIEW_NO = L.REVIEW_NO
	     WHERE R.STATUS = 'Y'
	       AND L.MEMBER_NO = #{memberNo}
	       AND A.FILE_LEVEL = 1
	     ORDER BY R.REVIEW_NO DESC
	</select>
	
</mapper>
